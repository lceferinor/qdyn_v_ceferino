(Priorities are not indicated)

Physics:
+ kernel for low-velocity fault zones
+ compute surface deformation to compare to GPS data
+ complete testing of slip to normal stress coupling 
+ slip-dependent friction law (Olivier Lengline is working on it)
+ in 2D: finite slab geometry (Pablo)
+ kernel for fault in infinite medium
+ variable strike
+ triangular elements: Meade's code (buggy?) or Gausian quadrature of Okada point sources
+ layered media: EDKS (Luis Rivera) or Relax (Sylvain Barbot)?
+ heterogeneous media: import kernel from Relax, Pylith, SPECFEM3D ?
+ set two-spring-blocks model

Code engineering and optimization:
+ MPI parallelization
+ hierarchical matrix techniques (interface to Andrew Bradley's code)
+ inputs as fortran namelists
+ use object oriented matlab
+ try enormous FFT (parallel) http://research.colfaxinternational.com/post/2014/09/18/EFFT.aspx

Outputs:
+ binary outputs
+ more options to set output times: at regular times (with switch to short time during events), at regular increment of log(v)

Packaging:
+ do "matlab publish" for the examples
+ automatically update "modification date" in google doc user's manual with Google Apps Script
+ add copyright notices (see http://www.gnu.org/copyleft/gpl.html)
+ add instructions for Windows and Mac
+ replace Num.Rec. code by something else: Lapusta's method (Noda and Lapusta 2010) or Gear's method in ODEPACK (http://computation.llnl.gov/casc/odepack/, used by Jessica Hawthorne)
+ document equations and friction laws in manual
+ set the path in constants.f90 and qdyn.m via the Makefile, instead of manually
+ use grive to update the google drive repository
+ get a DOI through https://zenodo.org/
